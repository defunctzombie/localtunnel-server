#!/usr/bin/env node

import "localenv";
import { parseArgs } from "node:util";
import log from "book";
import Debug from "debug";
import CreateServer from "../server.js";

const debug = Debug("localtunnel");

const options = {
  secure: {
    type: "boolean",
    default: false,
    help: "use this flag to indicate proxy over https",
  },
  port: {
    type: "string",
    default: "80",
    help: "listen on this port for outside requests",
  },
  address: {
    type: "string",
    default: "0.0.0.0",
    help: "IP address to bind to",
  },
  domain: {
    type: "string",
    help: "Specify the base domain name. This is optional if hosting localtunnel from a regular example.com domain. This is required if hosting a localtunnel server from a subdomain (i.e. lt.example.dom where clients will be client-app.lt.example.come)",
  },
  "max-sockets": {
    type: "string",
    default: "10",
    help: "maximum number of tcp sockets each client is allowed to establish at one time (the tunnels)",
  },
  help: { type: "boolean", help: "Show help" },
};

const { values: argv } = parseArgs({ options });

if (argv.help) {
  console.log("Usage: server --port [num]\n");
  console.log("Options:");
  for (const [key, value] of Object.entries(options)) {
    console.log(
      `  --${key}: ${value.help} ${
        value.default ? `(default: ${value.default})` : ""
      }`
    );
  }
  process.exit();
}

const server = CreateServer({
  max_tcp_sockets: parseInt(argv["max-sockets"], 10),
  secure: argv.secure,
  domain: argv.domain,
});

server.listen(argv.port, argv.address, () => {
  debug("server listening on port: %d", server.address().port);
});

process.on("SIGINT", () => {
  process.exit();
});

process.on("SIGTERM", () => {
  process.exit();
});

process.on("uncaughtException", (err) => {
  log.error(err);
});

process.on("unhandledRejection", (reason, promise) => {
  log.error(reason);
});

// vim: ft=javascript
